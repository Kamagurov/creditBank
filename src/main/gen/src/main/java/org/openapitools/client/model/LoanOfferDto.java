/*
 * Credit Bank API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoanOfferDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-23T17:22:42.826814800+03:00[Europe/Moscow]")
public class LoanOfferDto {
  public static final String SERIALIZED_NAME_STATEMENT_ID = "statementId";
  @SerializedName(SERIALIZED_NAME_STATEMENT_ID)
  private UUID statementId;

  public static final String SERIALIZED_NAME_REQUESTED_AMOUNT = "requestedAmount";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AMOUNT)
  private Double requestedAmount;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Double totalAmount;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private Integer term;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthlyPayment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  private Double monthlyPayment;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_IS_INSURANCE_ENABLED = "isInsuranceEnabled";
  @SerializedName(SERIALIZED_NAME_IS_INSURANCE_ENABLED)
  private Boolean isInsuranceEnabled;

  public static final String SERIALIZED_NAME_IS_SALARY_CLIENT = "isSalaryClient";
  @SerializedName(SERIALIZED_NAME_IS_SALARY_CLIENT)
  private Boolean isSalaryClient;

  public LoanOfferDto() {
  }

  public LoanOfferDto statementId(UUID statementId) {
    
    this.statementId = statementId;
    return this;
  }

   /**
   * Get statementId
   * @return statementId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getStatementId() {
    return statementId;
  }


  public void setStatementId(UUID statementId) {
    this.statementId = statementId;
  }


  public LoanOfferDto requestedAmount(Double requestedAmount) {
    
    this.requestedAmount = requestedAmount;
    return this;
  }

   /**
   * Get requestedAmount
   * @return requestedAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getRequestedAmount() {
    return requestedAmount;
  }


  public void setRequestedAmount(Double requestedAmount) {
    this.requestedAmount = requestedAmount;
  }


  public LoanOfferDto totalAmount(Double totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Get totalAmount
   * @return totalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(Double totalAmount) {
    this.totalAmount = totalAmount;
  }


  public LoanOfferDto term(Integer term) {
    
    this.term = term;
    return this;
  }

   /**
   * Get term
   * @return term
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTerm() {
    return term;
  }


  public void setTerm(Integer term) {
    this.term = term;
  }


  public LoanOfferDto monthlyPayment(Double monthlyPayment) {
    
    this.monthlyPayment = monthlyPayment;
    return this;
  }

   /**
   * Get monthlyPayment
   * @return monthlyPayment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getMonthlyPayment() {
    return monthlyPayment;
  }


  public void setMonthlyPayment(Double monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
  }


  public LoanOfferDto rate(Double rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * Get rate
   * @return rate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    this.rate = rate;
  }


  public LoanOfferDto isInsuranceEnabled(Boolean isInsuranceEnabled) {
    
    this.isInsuranceEnabled = isInsuranceEnabled;
    return this;
  }

   /**
   * Get isInsuranceEnabled
   * @return isInsuranceEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsInsuranceEnabled() {
    return isInsuranceEnabled;
  }


  public void setIsInsuranceEnabled(Boolean isInsuranceEnabled) {
    this.isInsuranceEnabled = isInsuranceEnabled;
  }


  public LoanOfferDto isSalaryClient(Boolean isSalaryClient) {
    
    this.isSalaryClient = isSalaryClient;
    return this;
  }

   /**
   * Get isSalaryClient
   * @return isSalaryClient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsSalaryClient() {
    return isSalaryClient;
  }


  public void setIsSalaryClient(Boolean isSalaryClient) {
    this.isSalaryClient = isSalaryClient;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanOfferDto loanOfferDto = (LoanOfferDto) o;
    return Objects.equals(this.statementId, loanOfferDto.statementId) &&
        Objects.equals(this.requestedAmount, loanOfferDto.requestedAmount) &&
        Objects.equals(this.totalAmount, loanOfferDto.totalAmount) &&
        Objects.equals(this.term, loanOfferDto.term) &&
        Objects.equals(this.monthlyPayment, loanOfferDto.monthlyPayment) &&
        Objects.equals(this.rate, loanOfferDto.rate) &&
        Objects.equals(this.isInsuranceEnabled, loanOfferDto.isInsuranceEnabled) &&
        Objects.equals(this.isSalaryClient, loanOfferDto.isSalaryClient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statementId, requestedAmount, totalAmount, term, monthlyPayment, rate, isInsuranceEnabled, isSalaryClient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanOfferDto {\n");
    sb.append("    statementId: ").append(toIndentedString(statementId)).append("\n");
    sb.append("    requestedAmount: ").append(toIndentedString(requestedAmount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    isInsuranceEnabled: ").append(toIndentedString(isInsuranceEnabled)).append("\n");
    sb.append("    isSalaryClient: ").append(toIndentedString(isSalaryClient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statementId");
    openapiFields.add("requestedAmount");
    openapiFields.add("totalAmount");
    openapiFields.add("term");
    openapiFields.add("monthlyPayment");
    openapiFields.add("rate");
    openapiFields.add("isInsuranceEnabled");
    openapiFields.add("isSalaryClient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("statementId");
    openapiRequiredFields.add("requestedAmount");
    openapiRequiredFields.add("totalAmount");
    openapiRequiredFields.add("term");
    openapiRequiredFields.add("monthlyPayment");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("isInsuranceEnabled");
    openapiRequiredFields.add("isSalaryClient");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoanOfferDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LoanOfferDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoanOfferDto is not found in the empty JSON string", LoanOfferDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LoanOfferDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoanOfferDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoanOfferDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("statementId") != null && !jsonObj.get("statementId").isJsonNull()) && !jsonObj.get("statementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementId").toString()));
      }
      if ((jsonObj.get("requestedAmount") != null && !jsonObj.get("requestedAmount").isJsonNull()) && !jsonObj.get("requestedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedAmount").toString()));
      }
      if ((jsonObj.get("totalAmount") != null && !jsonObj.get("totalAmount").isJsonNull()) && !jsonObj.get("totalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAmount").toString()));
      }
      if ((jsonObj.get("monthlyPayment") != null && !jsonObj.get("monthlyPayment").isJsonNull()) && !jsonObj.get("monthlyPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthlyPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthlyPayment").toString()));
      }
      if ((jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoanOfferDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoanOfferDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoanOfferDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoanOfferDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LoanOfferDto>() {
           @Override
           public void write(JsonWriter out, LoanOfferDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoanOfferDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoanOfferDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoanOfferDto
  * @throws IOException if the JSON string is invalid with respect to LoanOfferDto
  */
  public static LoanOfferDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoanOfferDto.class);
  }

 /**
  * Convert an instance of LoanOfferDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

